{"version":3,"sources":["components/Utility.js","components/algorithms/mergeSort.js","components/algorithms/quickSort.js","components/AnimateComponent.js","components/Navbar.js","components/algorithms/bubbleSort.js","components/algorithms/insertionSort.js","components/ArrayComponent.js","components/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["getRandomArray","arraySize","arr","i","push","Math","floor","random","MAX_H","MIN_H","colorChangeRequest","idx1","idx2","color","Time","setTimeout","aux","document","getElementsByClassName","style","backgroundColor","DELAY","twocolorChangeRequest","color1","color2","singlecolorChangeRequest","heightChangeRequest","idx","height","mergeSortAnimations","array","animations","mergeSort","temp","startIndex","length","middle","left","slice","right","k","result","leftIndex","rightIndex","compair","merge","quickSortAnimations","quickSort","start","end","index","pivotValue","pivotIndex","partition","deployAnimations","setIsSorting","setIsSorted","time","index1","index2","height1","height2","COLOR_CHECK","COLOR_OUT","COLOR_IN","COLOR_BAR","sortCompletedAnimation","NO_OF_BARS","COLOR_SORTED","Navbar","setArray","setSortType","isSorting","setArraySize","isSorted","resetArray","e","className","onClick","type","preventDefault","j","t","bubbleSortAnimations","COLOR_BLUE","deployMergeAnimations","cur","console","log","insertionSortAnimations","val1","val2","deployQuickAnimations","Bars","sortType","JSON","stringify","map","bar","SortingVisualizer","props","useState","useEffect","target","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qPAEO,SAASA,EAAgBC,GAE5B,IADA,IAAMC,EAAM,GACJC,EAAE,EAAEA,EAAEF,EAAUE,IACpBD,EAAIE,KAAKC,KAAKC,MAAMD,KAAKE,UAAUC,EAAQC,EAAO,GAAGA,IAG1D,OAAOP,EAyBH,IAAMQ,EAAqB,SAACC,EAAKC,EAAKC,EAAMC,GAE/CC,YAAW,WAGP,IAAMC,EAAMC,SAASC,uBAAuB,aAE5CF,EAAIL,GAAMQ,MAAMC,gBAAiBP,EACjCG,EAAIJ,GAAMO,MAAMC,gBAAiBP,IAEnCC,EAAKO,IAIEC,EAAwB,SAACX,EAAKC,EAAKW,EAAOC,EAAOV,GAE1DC,YAAW,WAGP,IAAMC,EAAMC,SAASC,uBAAuB,aAE5CF,EAAIL,GAAMQ,MAAMC,gBAAiBG,EACjCP,EAAIJ,GAAMO,MAAMC,gBAAiBI,IAEnCV,EAAKO,IAKGI,EAA2B,SAACd,EAAKY,EAAOT,GAElDC,YAAW,WAGKE,SAASC,uBAAuB,aAExCP,GAAMQ,MAAMC,gBAAiBG,IAEnCT,EAAKO,IAKEK,EAAsB,SAACC,EAAIC,EAAOd,GAE3CC,YAAW,WAECE,SAASC,uBAAuB,aAExCS,GAAKR,MAAMS,OAAf,UAA2BA,EAA3B,QAEEd,EAAKO,I,OCjFJ,SAASQ,EAAqBC,GAEjC,IAAIC,EAAa,IAEjB,SAASC,EAAUC,EAAKC,GAGpB,GAAiB,IAAdD,EAAKE,OACJ,OAAOF,EAGX,IAAMG,EAAS/B,KAAKC,MAAM2B,EAAKE,OAAS,GAClCE,EAAOJ,EAAKK,MAAM,EAAEF,GACpBG,EAASN,EAAKK,MAAMF,GAE1B,OAIJ,SAAeC,EAAKE,EAAMC,GACtB,IAAIC,EAAU,GACVC,EAAY,EACZC,EAAa,EAEbC,EAAU,GAEd,KAAMF,EAAYL,EAAKF,QAAUQ,EAAaJ,EAAMJ,QAE5CE,EAAKK,GAAaH,EAAMI,KAExBC,EAAQ,IAEAxC,MAAK,GACbwC,EAAQxC,KAAKoC,EAAEE,GACfE,EAAQxC,KAAKoC,EAAEH,EAAKF,OAAOQ,GAC3BC,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKoC,EAAEC,EAAON,QACtBS,EAAQxC,KAAKiC,EAAKK,IAClBX,EAAW3B,KAAKwC,GAGhBH,EAAOrC,KAAKiC,EAAKK,IACjBA,OAGAE,EAAQ,IAEAxC,MAAK,GACbwC,EAAQxC,KAAKoC,EAAEE,GACfE,EAAQxC,KAAKoC,EAAEH,EAAKF,OAAOQ,GAC3BC,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKoC,EAAEC,EAAON,QACtBS,EAAQxC,KAAKmC,EAAMI,IACnBZ,EAAW3B,KAAKwC,GAIhBH,EAAOrC,KAAKmC,EAAMI,IAClBA,KAIR,GAAGD,GAAaL,EAAKF,QAAUQ,GAAcJ,EAAMJ,OAC/C,OAAOM,EAEN,GAAGC,GAAaL,EAAKF,QAAUQ,EAAaJ,EAAMJ,OAAO,CAC1D,KAAMQ,EAAaJ,EAAMJ,SAErBS,EAAQ,IACAxC,MAAK,GACbwC,EAAQxC,KAAKoC,EAAEC,EAAON,QACtBS,EAAQxC,KAAKmC,EAAMI,IACnBZ,EAAW3B,KAAKwC,GAGhBH,EAAOrC,KAAKmC,EAAMI,IAClBA,IAEJ,OAAOF,EAEN,GAAGC,EAAYL,EAAKF,QAAUQ,GAAcJ,EAAMJ,OAAO,CAC1D,KAAMO,EAAYL,EAAKF,SAEnBS,EAAQ,IACAxC,MAAK,GACbwC,EAAQxC,KAAKoC,EAAEC,EAAON,QACtBS,EAAQxC,KAAKiC,EAAKK,IAClBX,EAAW3B,KAAKwC,GAGhBH,EAAOrC,KAAKiC,EAAKK,IACjBA,IAEJ,OAAOD,GA9EJI,CAAMb,EAAUK,EAAKH,GAAYF,EAAUO,EAAML,EAAWG,EAAKF,QAAQD,IAkF1EF,CADF,YAAOF,GACU,GAWzB,OAAOC,EC9GJ,SAASe,EAAqBhB,GACjC,IAAIC,EAAa,GACb7B,EAAG,YAAM4B,IA6EjB,SAASiB,EAAU7C,EAAK8C,EAAOC,GAG3B,KAAID,GAASC,GAAb,CAKA,IAAIC,EAlFJ,SAAmBhD,EAAK8C,EAAOC,GAC3B,IAAME,EAAajD,EAAI+C,GACnBG,EAAaJ,EACbJ,EAAU,GAEdA,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKgD,GAEbrB,EAAW3B,KAAKwC,GAChB,IAAK,IAAIzC,EAAI6C,EAAO7C,EAAI8C,EAAK9C,IACzB,GAAID,EAAIC,GAAKgD,EAAY,EACrBP,EAAU,IAEFxC,MAAK,GACbwC,EAAQxC,MAAK,GACbwC,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKD,GACbyC,EAAQxC,KAAK6C,GAEblB,EAAW3B,KAAKwC,IAGhBA,EAAU,IAEFxC,MAAK,GACdwC,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKD,GACbyC,EAAQxC,KAAKgD,GACbR,EAAQxC,KAAKF,EAAIC,IACjByC,EAAQxC,KAAKF,EAAIkD,IAEjBrB,EAAW3B,KAAKwC,GArBM,MAyBO,CAAC1C,EAAIkD,GAAalD,EAAIC,IAAjDD,EAAIC,GAzBgB,KAyBZD,EAAIkD,GAzBQ,KA2BrBA,KAEAR,EAAU,IACFxC,MAAK,GACbwC,EAAQxC,KAAKgD,GACbrB,EAAW3B,KAAKwC,QAGhBA,EAAU,IAENxC,MAAK,GACbwC,EAAQxC,MAAK,GACbwC,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKD,GACbyC,EAAQxC,KAAK6C,GAEblB,EAAW3B,KAAKwC,IAIrBA,EAAU,IAEFxC,MAAK,GACbwC,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKgD,GACbR,EAAQxC,KAAK6C,GACbL,EAAQxC,KAAKF,EAAIkD,IACjBR,EAAQxC,KAAKF,EAAI+C,IAEjBlB,EAAW3B,KAAKwC,GAlEgB,MAmED,CAAC1C,EAAI+C,GAAM/C,EAAIkD,IAG7C,OAHClD,EAAIkD,GAnE0B,KAmEblD,EAAI+C,GAnES,KAsExBG,EAYCC,CAAUnD,EAAK8C,EAAOC,GAWlC,OAJAF,EAAU7C,EAAK8C,EAAOE,EAAQ,GAE9BH,EAAU7C,EAAKgD,EAAQ,EAAGD,GAEnB/C,IAgJG6C,CAAU7C,EAAI,EAAEA,EAAIiC,OAAO,GAarC,OAAOJ,EC7PJ,SAASuB,EAAiBvB,EAAWwB,EAAaC,GAQrD,IANA,IAAIC,EAAO,EAMHtD,EAAE,EAAEA,EAAE4B,EAAWI,OAAOhC,IAE5B,GAAG4B,EAAW5B,GAAG,GAAG,CAEhB,IAAMuD,EAAS3B,EAAW5B,GAAG,GACvBwD,EAAS5B,EAAW5B,GAAG,GACvByD,EAAU7B,EAAW5B,GAAG,GACxB0D,EAAU9B,EAAW5B,GAAG,GAE9BO,EAAmBgD,EAAOC,EAAOG,EAAYL,GAC7CA,IACA/C,EAAmBgD,EAAOC,EAAOI,EAAUN,GAC3CA,IACA/B,EAAoBgC,EAAOG,EAAQJ,GACnCA,IACA/B,EAAoBiC,EAAOC,EAAQH,GACnCA,IACA/C,EAAmBgD,EAAOC,EAAOK,EAASP,GAC1CA,IACC/C,EAAmBgD,EAAOC,EAAOM,EAAUR,GAC5CA,QACC,CACD,IAAMC,EAAS3B,EAAW5B,GAAG,GACvBwD,EAAS5B,EAAW5B,GAAG,GAE7BO,EAAmBgD,EAAOC,EAAOG,EAAYL,GAC7CA,IACA/C,EAAmBgD,EAAOC,EAAOK,EAASP,GAC1CA,IACA/C,EAAmBgD,EAAOC,EAAOM,EAAUR,GAC3CA,IAKRS,EAAuBT,EAAKF,EAAaC,GA0ItC,SAASU,EAAuBT,EAAKF,EAAaC,GACrD,IAAI,IAAIrD,EAAE,EAAEA,EAAEgE,EAAWhE,IACrBsB,EAAyBtB,EAAEiE,EAAaX,GACxCA,IAGJ1C,YAAW,WACPwC,GAAa,GACbC,GAAY,KACdC,GCtLN,IAwGeY,EAxGA,SAAC,GAAqG,IAApGvC,EAAmG,EAAnGA,MAAOwC,EAA4F,EAA5FA,SAASC,EAAmF,EAAnFA,YAAYtE,EAAuE,EAAvEA,UAAuBuE,GAAgD,EAA7DC,aAA6D,EAAhDD,WAAUjB,EAAsC,EAAtCA,aAAamB,EAAyB,EAAzBA,SAASlB,EAAgB,EAAhBA,YAC1FmB,EAAa,SAACC,GAChB,IAAGJ,EAAH,CAIAhB,GAAY,GAEZc,EAAUtE,EAAeC,IAEzB,IADA,IAAMe,EAAMC,SAASC,uBAAuB,aACpCf,EAAE,EAAEA,EAAEF,EAAUE,IACpBa,EAAIb,GAAGgB,MAAMC,gBAAkB6C,IA+EvC,OACI,sBAAKY,UAAY,0BAAjB,UAEQ,wBAAQC,QAAWH,EAAYE,UAAY,MAAME,KAAO,SAAxD,yBACA,wBAAQD,QA9EA,SAACF,IACjBA,EAAEI,iBACCR,KAIAE,GACEC,IAELpB,GAAa,GAEbgB,EAAY,UAGZjB,ECvCD,SAAgCxB,GAKnC,IAHA,IAAI5B,EAAG,YAAM4B,GAEPC,EAAa,GACX5B,EAAI,EAAGA,EAAGD,EAAIiC,OAAOhC,IAGzB,IAAI,IAAI8E,EAAG,EAAEA,EAAE/E,EAAIiC,OAAShC,EAAG8E,IAAI,CAG/B,IAAIrC,EAAU,GAId,GAHAA,EAAQxC,KAAK6E,EAAE,GACfrC,EAAQxC,KAAK6E,GAEV/E,EAAI+E,EAAE,GAAG/E,EAAI+E,GAAG,CACfrC,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKF,EAAI+E,EAAE,IACnBrC,EAAQxC,KAAKF,EAAI+E,IAEjBlD,EAAW3B,KAAKwC,GAGhB,IAAIsC,EAAEhF,EAAI+E,EAAE,GACZ/E,EAAI+E,EAAE,GAAK/E,EAAI+E,GACf/E,EAAI+E,GAAKC,OAMTtC,EAAQxC,MAAK,GACb2B,EAAW3B,KAAKwC,GAqB5B,OAAOb,EDhBgBoD,CAAqBrD,GAEZyB,EAAaC,KAgEFqB,UAAY,MAAME,KAAO,SAAxD,0BACA,wBAAQD,QA5DD,SAACF,IAChBA,EAAEI,iBACCR,KAIAE,GACCC,IAEJpB,GAAa,GAGbgB,EAAY,SDNb,SAA+BxC,EAAWwB,EAAaC,GAIzD,IADD,IAAIC,EAAO,EACFtD,EAAE,EAAEA,EAAE4B,EAAWI,OAAOhC,IAC5B,GAAI4B,EAAW5B,GAAG,GAsCb,CACF,IAAMuD,EAAS3B,EAAW5B,GAAG,GAG5BsB,EAAyBiC,EAAO0B,EAAW3B,GAC3CA,IACA/B,EAAoBgC,EAAO3B,EAAW5B,GAAG,GAAGsD,GAC5CA,IACAhC,EAAyBiC,EAAOM,EAASP,GACzCA,IACAhC,EAAyBiC,EAAOO,EAAUR,GAC1CA,QAjDiB,CAEjB,IAAMC,EAAS3B,EAAW5B,GAAG,GACvBwD,EAAS5B,EAAW5B,GAAG,GAE1B4B,EAAW5B,GAAG,IAEdO,EAAmBgD,EAAOC,EAAOG,EAAYL,GAC7CA,IACA/C,EAAmBgD,EAAOC,EAAOI,EAAUN,GAC3CA,IAEA/B,EAAoBK,EAAW5B,GAAG,GAAG4B,EAAW5B,GAAG,GAAGsD,GACtDA,IACAnC,EAAsBoC,EAAOC,EAAOK,EAASoB,EAAW3B,GACxDA,IACA/C,EAAmBgD,EAAOC,EAAOM,EAAUR,GAC3CA,MAOH/C,EAAmBgD,EAAOC,EAAOG,EAAYL,GAC7CA,IACA/C,EAAmBgD,EAAOC,EAAOK,EAASP,GAC1CA,IAEA/B,EAAoBK,EAAW5B,GAAG,GAAG4B,EAAW5B,GAAG,GAAGsD,GACtDA,IAEA/C,EAAmBgD,EAAOC,EAAOM,EAAUR,GAC3CA,KAqBbS,EAAuBT,EAAKF,EAAaC,GClDjC6B,CAFoBxD,EAAoBC,GAEPyB,EAAaC,KA6CRqB,UAAY,MAAME,KAAO,SAAvD,yBACA,wBAAQD,QA1CG,SAACF,IACpBA,EAAEI,iBACCR,KAIAE,GACCC,IAEJpB,GAAa,GAGbgB,EAAY,aAEZjB,EE7ED,SAAkCxB,GAMrC,IAJA,IAAIC,EAAa,GAEb7B,EAAG,YAAM4B,GAEL3B,EAAE,EAAEA,EAAED,EAAIiC,OAAOhC,IAAI,CAMrB,IAJJ,IAAImF,EAAMpF,EAAIC,GACV8E,EAAE9E,EAAE,EAGE8E,GAAG,GAAKK,EAAMpF,EAAI+E,IAAI,CAExB,IAAIrC,KAAU,IAENxC,KAAK6E,GACbrC,EAAQxC,KAAK6E,EAAE,GACfrC,EAAQxC,MAAK,GACbwC,EAAQxC,KAAKF,EAAI+E,IACjBrC,EAAQxC,KAAKF,EAAI+E,EAAE,IAEnBlD,EAAW3B,KAAKwC,GAEhB1C,EAAI+E,EAAE,GAAG/E,EAAI+E,GAEb/E,EAAI+E,GAAIK,EAERL,KAKA,IAALA,KACKrC,EAAU,IAENxC,KAAK6E,GACbrC,EAAQxC,KAAK6E,EAAE,GACfrC,EAAQxC,MAAK,GAEb2B,EAAW3B,KAAKwC,GAEhB1C,EAAI+E,EAAE,GAAGK,GAejB,OADAC,QAAQC,IAAIzD,GACLA,EFmBgB0D,CAAwB3D,GACfyB,EAAaC,KA4BCqB,UAAY,MAAME,KAAO,SAA3D,6BACA,wBAAQD,QA1BD,SAACF,IAChBA,EAAEI,iBACCR,KAIAE,GACCC,IAEJpB,GAAa,GAGbgB,EAAY,SDqBb,SAA+BxC,EAAWwB,EAAaC,GAI1D,IAFA,IAAIC,EAAM,EAEFtD,EAAE,EAAEA,EAAE4B,EAAWI,OAAOhC,IAE5B,GAAG4B,EAAW5B,GAAG,GAAG,CAEhB,IAAMuD,EAAS3B,EAAW5B,GAAG,GAC7BsB,EAAyBiC,EAAO0B,EAAW3B,GAC3CA,IACAhC,EAAyBiC,EAAOO,EAAUR,GAC1CA,SAIA,GAAG1B,EAAW5B,GAAG,GAAG,CAEhB,IAAMuD,EAAS3B,EAAW5B,GAAG,GACvBwD,EAAS5B,EAAW5B,GAAG,GAE1B4B,EAAW5B,GAAG,IAEbO,EAAmBgD,EAAOC,EAAOG,EAAYL,GAC7CA,IACA/C,EAAmBgD,EAAOC,EAAOK,EAASP,GAC1CA,IACA/C,EAAmBgD,EAAOC,EAAOM,EAAUR,GAC3CA,MAKA/C,EAAmBgD,EAAOC,EAAOG,EAAYL,GAC7CA,IACA/C,EAAmBgD,EAAOC,EAAOI,EAAUN,GAC3CA,IACA/C,EAAmBgD,EAAOC,EAAOM,EAAUR,GAC3CA,SAGH,CAED,IAAMC,EAAS3B,EAAW5B,GAAG,GACvBwD,EAAS5B,EAAW5B,GAAG,GACvBuF,EAAO3D,EAAW5B,GAAG,GACrBwF,EAAO5D,EAAW5B,GAAG,GAE3BO,EAAmBgD,EAAOC,EAAOyB,EAAW3B,GAC5CA,IACA/B,EAAoBgC,EAAOiC,EAAKlC,GAChCA,IACA/B,EAAoBiC,EAAO+B,EAAKjC,GAChCA,IACA/C,EAAmBgD,EAAOC,EAAOM,EAAUR,GAC3CA,IAUZS,EAAuBT,EAAKF,EAAaC,GCpFrCoC,CADkB9C,EAAoBhB,GACLyB,EAAaC,KAYRqB,UAAY,MAAME,KAAO,SAAvD,6BGvDDc,MAhDd,YAAoE,IAAnD/D,EAAkD,EAAlDA,MAAQgE,EAA0C,EAA1CA,SAAU7F,EAAgC,EAAhCA,UAAUuE,EAAsB,EAAtBA,UAAUE,EAAY,EAAZA,SAWpD,OACI,sBAAKG,UAAY,OAAjB,UACI,sBAAKA,UAAY,mBAAjB,8BACqB,uBADrB,gBAEkB5E,EACd,uBAHJ,WAIa8F,KAAKC,UAAUlE,GACxB,uBALJ,eAMiBgE,EACb,uBAPJ,gBAQkBtB,EAAY,OAAQ,KAClC,uBATJ,eAUiBE,EAAW,MAAO,QAInC,qBAAKG,UAAY,sBAAjB,SAEQ/C,EAAMmE,KAAI,SAACC,EAAIhD,GACX,OACI,qBAAK2B,UAAY,YAEb1D,MAAO,CAACS,OAAM,UAAMsE,EAAN,MACV9E,gBAAkB6C,GAH1B,cACWf,YC7B1BiB,EAAa,IACb1D,EAAQ,GACRD,EAAQ,IACRsD,EAAc,SACdC,EAAY,MACZC,EAAW,QACXC,EAAY,YACZmB,EAAa,OACbhB,EAAe,aAEf/C,EAAQ,EAmDN8E,MAhDd,SAA4BC,GAAQ,IAAD,EAETC,mBAAS,IAFA,mBAEzBvE,EAFyB,KAEnBwC,EAFmB,OAGD+B,mBAAS,IAHR,mBAGzBP,EAHyB,KAGhBvB,EAHgB,OAIE8B,mBAASlC,GAJX,mBAIzBlE,EAJyB,KAIdwE,EAJc,OAKC4B,oBAAS,GALV,mBAKzB7B,EALyB,KAKfjB,EALe,OAMD8C,oBAAS,GANR,mBAMzB3B,EANyB,KAMhBlB,EANgB,KAehC,OANA8C,qBAAU,WACNhC,EAAStE,EAAeC,MAC1B,IAKE,sBAAK4E,UAAY,YAAjB,UACI,cAAC,EAAD,CACA/C,MAASA,EACTwC,SAAYA,EACZC,YAAeA,EACftE,UAAaA,EACbwE,aAAgBA,EAChBD,UAAaA,EACbjB,aAAgBA,EAChBmB,SAAYA,EACZlB,YAAeA,IAGf,cAAC,EAAD,CACA1B,MAASA,EAETgE,SAAYA,EACZ7F,UAAaA,EACbuE,UAAaA,EACbE,SAAYA,IAGZ,wBAAQG,UAAW,SAAnB,SACI,wEAA2C,uBAA3C,gBACiB,mBAAGA,UAAW,QAAQ0B,OAAS,SAASC,KAAO,iDAA/C,iCC9ClBC,MAXf,WACE,OACE,sBAAK5B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,gCAGA,cAAC,EAAD,QCES6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpG,SAASqG,eAAe,SAM1BZ,K","file":"static/js/main.fce20390.chunk.js","sourcesContent":["import  {MAX_H,MIN_H,DELAY} from './SortingVisualizer';\r\n\r\nexport function getRandomArray (arraySize){\r\n    const arr = [];\r\n    for(let i=0;i<arraySize;i++){\r\n        arr.push(Math.floor(Math.random()*(MAX_H - MIN_H +1)+MIN_H));\r\n    }\r\n    //console.log(\"random array generated in Utility getrandom array \");\r\n   return arr ;\r\n}\r\n\r\nexport const swap =(item1,item2 )=>{\r\n    \r\n    var temp = item1;\r\n    item1 = item2;\r\n    item2 = temp;\r\n\r\n    return ;\r\n}\r\n\r\nexport function testSort(arr1,arr2){\r\n\r\n    var arr3 =arr2;\r\n    arr3.sort(function(a,b){return a-b});\r\n    if(JSON.stringify(arr1)==JSON.stringify(arr3)){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n\r\n// color manipulating function\r\n//tow index same color\r\nexport const colorChangeRequest = (idx1,idx2,color,Time) =>{\r\n    //const aux = document.getElementsByClassName(\"array-bar\");\r\n    setTimeout(()=>{\r\n        //console.log(\"index : \"+idx1+\" and index :\"+idx2+\" color changed to : \"+ color +\" at time  t:\"+Time+\" * \"+ DELAY+\" =  \"+Time*DELAY+\" ms\");\r\n\r\n        const aux = document.getElementsByClassName(\"array-bar\");\r\n\r\n        aux[idx1].style.backgroundColor =color;\r\n        aux[idx2].style.backgroundColor =color;\r\n\r\n    },Time*DELAY);\r\n\r\n}\r\n//two index diffrent color\r\nexport const twocolorChangeRequest = (idx1,idx2,color1,color2,Time) =>{\r\n    //const aux = document.getElementsByClassName(\"array-bar\");\r\n    setTimeout(()=>{\r\n       // console.log(\"index : \"+idx1+\" and index :\"+idx2+\" color changed to : \"+ color +\" at time  t:\"+Time+\" * \"+ DELAY+\" =  \"+Time*DELAY+\" ms\");\r\n\r\n        const aux = document.getElementsByClassName(\"array-bar\");\r\n\r\n        aux[idx1].style.backgroundColor =color1;\r\n        aux[idx2].style.backgroundColor =color2;\r\n\r\n    },Time*DELAY);\r\n\r\n}\r\n//single index single color\r\n\r\nexport  const singlecolorChangeRequest = (idx1,color1,Time) =>{\r\n    //const aux = document.getElementsByClassName(\"array-bar\");\r\n    setTimeout(()=>{\r\n       // console.log(\"index : \"+idx1+\" and index :\"+idx2+\" color changed to : \"+ color +\" at time  t:\"+Time+\" * \"+ DELAY+\" =  \"+Time*DELAY+\" ms\");\r\n\r\n        const aux = document.getElementsByClassName(\"array-bar\");\r\n\r\n        aux[idx1].style.backgroundColor =color1;\r\n\r\n    },Time*DELAY);\r\n}\r\n\r\n// height manipulating function\r\n\r\nexport const heightChangeRequest = (idx,height,Time) =>{\r\n\r\n    setTimeout(()=>{\r\n        //console.log(\"index : \"+idx+\" height changed to : \"+ height +\" at time  t: \"+Time+\" * \"+ DELAY+\" =  \"+Time*DELAY+\" ms\");\r\n    const aux = document.getElementsByClassName(\"array-bar\");\r\n\r\n    aux[idx].style.height = `${height}px`;\r\n\r\n    },Time*DELAY);\r\n}\r\n\r\n","import {testSort} from '../Utility';\r\n\r\n\r\nexport function mergeSortAnimations (array) {   \r\n    \r\n    let animations = [];\r\n\r\n    function mergeSort(temp,startIndex){\r\n     //console.log(temp);\r\n     //console.log(startIndex);\r\n        if(temp.length===1){\r\n            return temp;\r\n        }\r\n\r\n        const middle = Math.floor(temp.length / 2);\r\n        const left = temp.slice(0,middle);\r\n        const right  = temp.slice(middle);\r\n\r\n        return merge(mergeSort(left,startIndex),mergeSort(right,startIndex+left.length),startIndex);\r\n\r\n    }\r\n\r\n    function merge(left,right,k){\r\n        let result  = [];\r\n        let leftIndex = 0;\r\n        let rightIndex = 0;\r\n        \r\n        var compair = [];\r\n\r\n        while(leftIndex < left.length && rightIndex < right.length ) {\r\n\r\n            if( left[leftIndex] < right[rightIndex] ){\r\n                // li ri fal\r\n                compair=[] ;\r\n\r\n                compair.push(false);\r\n                compair.push(k+leftIndex);\r\n                compair.push(k+left.length+rightIndex);\r\n                compair.push(false);\r\n                compair.push(k+result.length);\r\n                compair.push(left[leftIndex]);\r\n                animations.push(compair);\r\n                \r\n               //console.log(\"compairing position \"+(k +leftIndex)+\" and \"+(k+left.length+rightIndex) +\" putting value at \"+k+\" + \"+result.length+\" = \"+(k+result.length)+\"  = \"+ left[leftIndex]);\r\n                result.push(left[leftIndex]);\r\n                leftIndex++;\r\n            }else{\r\n                //li  ri true     r[ri]\r\n                compair=[] ;\r\n\r\n                compair.push(false);\r\n                compair.push(k+leftIndex);\r\n                compair.push(k+left.length+rightIndex);\r\n                compair.push(true);\r\n                compair.push(k+result.length);\r\n                compair.push(right[rightIndex]);\r\n                animations.push(compair);\r\n                \r\n               //console.log(\"compairing position \"+(k +leftIndex)+\" and \"+(k+left.length+rightIndex) +\" putting value at \"+k+\" + \"+result.length+\" = \"+(k+result.length)+\"  = \"+ right[rightIndex]);\r\n\r\n                result.push(right[rightIndex]);\r\n                rightIndex++;\r\n            }\r\n        }\r\n\r\n        if(leftIndex == left.length && rightIndex == right.length){\r\n            return result;\r\n        }\r\n        else if(leftIndex == left.length && rightIndex < right.length){\r\n            while(rightIndex < right.length){\r\n                \r\n                compair=[] ;\r\n                compair.push(true);\r\n                compair.push(k+result.length);\r\n                compair.push(right[rightIndex]);\r\n                animations.push(compair);\r\n                \r\n               //console.log(\" move value at position \"+(k+left.length+rightIndex) +\" to putting value at \"+k+\" + \"+result.length+\" = \"+(k+result.length)+\"  = \"+ right[rightIndex]  );\r\n                result.push(right[rightIndex]);\r\n                rightIndex++;\r\n            }\r\n            return result;\r\n        }\r\n        else if(leftIndex < left.length && rightIndex == right.length){\r\n            while(leftIndex < left.length){\r\n\r\n                compair=[] ;\r\n                compair.push(true);\r\n                compair.push(k+result.length);\r\n                compair.push(left[leftIndex]);\r\n                animations.push(compair);\r\n               //console.log(\" move value at position \"+(k+leftIndex) +\" to putting value at \"+k+\" + \"+result.length+\" = \"+(k+result.length)+\"  = \"+ left[leftIndex]  );\r\n\r\n                result.push(left[leftIndex]);\r\n                leftIndex++;\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n    var temp = [...array];\r\n    var arr = mergeSort(temp,0);\r\n   // console.log(\"mergesort input \" + temp);\r\n\r\n    //console.log(\"merge sorted array : \" +arr);\r\n  /*  if(testSort(arr,array)){\r\n        console.log(\"tested succesfull \");\r\n    }\r\n    else{\r\n        console.log(\"tested unsuccesfull error in sort \");\r\n    }\r\n    */\r\n    return animations;\r\n}","import {testSort} from '../Utility';\r\nexport function quickSortAnimations (array){\r\n    var animations = [];\r\n    var arr =[...array] ;\r\n    \r\n\r\n    function partition(arr, start, end){\r\n        const pivotValue = arr[end];\r\n        let pivotIndex = start; \r\n        var compair = [];\r\n\r\n        compair.push(true);\r\n        compair.push(pivotIndex);\r\n\r\n        animations.push(compair);\r\n        for (let i = start; i < end; i++) {\r\n            if (arr[i] < pivotValue) {\r\n                compair = [];\r\n\r\n                compair.push(false);\r\n                compair.push(true);\r\n                compair.push(true);\r\n                compair.push(i);\r\n                compair.push(end);\r\n\r\n                animations.push(compair);\r\n\r\n\r\n                compair = [];\r\n\r\n                compair.push(false);\r\n               compair.push(false);\r\n               compair.push(i);\r\n               compair.push(pivotIndex);\r\n               compair.push(arr[i]);\r\n               compair.push(arr[pivotIndex]);\r\n   \r\n               animations.push(compair);\r\n\r\n                //console.log(arr[i]+\" < \"+pivotValue+\" swap arr[\"+i+\"] to \"+arr[pivotIndex]+\"swap arr[\"+pivotIndex+\"] to \"+arr[i]);\r\n\r\n                [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\r\n                // Moving to next element\r\n                pivotIndex++;\r\n\r\n                compair = [];\r\n                compair.push(true);\r\n                compair.push(pivotIndex);\r\n                animations.push(compair);\r\n            }else{\r\n\r\n                compair = [];\r\n             \r\n            compair.push(false);\r\n            compair.push(true);\r\n            compair.push(false);\r\n            compair.push(i);\r\n            compair.push(end);\r\n\r\n            animations.push(compair);\r\n            }\r\n        }\r\n       // console.log(\"swap arr[\"+pivotIndex+\"] to \"+arr[end]+\"swap arr[\"+end+\"] to \"+arr[pivotIndex]);\r\n       compair = [];\r\n\r\n       compair.push(false);\r\n       compair.push(false);\r\n       compair.push(pivotIndex);\r\n       compair.push(end);\r\n       compair.push(arr[pivotIndex]);\r\n       compair.push(arr[end]);\r\n\r\n       animations.push(compair);\r\n        [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]] ;\r\n    \r\n        \r\n        return pivotIndex;\r\n};\r\n\r\n\r\nfunction quickSort(arr, start, end) {\r\n    ///k is no of element before start for referenceing in animations array\r\n    // Base case or terminating case\r\n    if (start >= end) {\r\n        return;\r\n    }\r\n    \r\n    // Returns pivotIndex\r\n    let index = partition(arr, start, end);\r\n    //console.log(\" In the quicksort start :\" +start+\" end : \" +end+\" pivot : \"+index);\r\n    \r\n   \r\n    \r\n    // Recursively apply the same logic to the left and right subarrays\r\n    //console.log(\"start \"+start+\" end  \"+(index-1));\r\n    quickSort(arr, start, index - 1);\r\n    //console.log(\"start \"+(index+1)+\" end  \"+(end));\r\n    quickSort(arr, index + 1, end);\r\n\r\n    return arr;\r\n};\r\n/*\r\nexport function xquickSortAnimations (array){\r\n    var animations = [];\r\n    var arr =[...array] ;\r\n    for (let i = start; i < end; i++) {\r\n            \r\n        if (arr[i] < pivotValue) {\r\n\r\n    function partition(arr, start, end,k){\r\n        //k is no of element before start for referenceing in animations array\r\n        // Taking the last element as the pivot\r\n        const pivotValue = arr[end];\r\n        let pivotIndex = start; \r\n        \r\n        console.log(\"start :\" +start+\" end : \" +end+\" pivot : \"+pivotIndex+\" k : \"+k +\" k+pivotIndex = \"+(k+pivotIndex));\r\n        //pi b+o (ispivot ,pivotindex)\r\n        \r\n        var compair = [];\r\n\r\n        compair.push(true);\r\n        compair.push(k+pivotIndex);\r\n\r\n        animations.push(compair);\r\n        \r\n\r\n        for (let i = start; i < end; i++) {\r\n            \r\n            if (arr[i] < pivotValue) {\r\n            //(ispivot = false ,iscomapir =true ,compairval = true ,i ,end )\r\n            // compair  i and end =>y  if i<e =>g then swap (i1,i2,v1,v2) else if i>=e =>red =>o  pivot =>b =>o  \r\n            // Swapping elements\r\n            console.log( \"in the loop comparison  = true cvaal = true \");\r\n            console.log(\"arr[\"+i+\"] < \"+\"arr[\"+end+\"]  = \"+arr[i] +\" < \"+arr[end]+\" ie \"+pivotValue);\r\n            console.log(\"in animation push index \"+(k+i)+\" and \"+(k+end));\r\n            \r\n            \r\n            compair = [];\r\n\r\n            compair.push(false);\r\n            compair.push(true);\r\n            compair.push(true);\r\n            compair.push(k+i);\r\n            compair.push(k+end);\r\n\r\n            animations.push(compair);\r\n            \r\n\r\n            //swap ispivot  =false ,is compair  =false,i,pi,arr[i],arr[pi]\r\n            console.log(\"in   loop is pivot =false iscomparison =false is swapping  \");\r\n            console.log(\"swap values at index \"+i+\" and \"+pivotIndex+\" with value \"+arr[i]+\" and \"+arr[pivotIndex]+\"global index val at index ; \"+(k+i)+\" and\"+(k+pivotIndex) );\r\n            \r\n\r\n            \r\n            compair = [];\r\n\r\n             compair.push(false);\r\n            compair.push(false);\r\n            compair.push(k+i);\r\n            compair.push(k+pivotIndex);\r\n            compair.push(arr[k+i]);\r\n            compair.push(arr[k+pivotIndex]);\r\n\r\n            animations.push(compair);\r\n            \r\n            [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\r\n            // Moving to next element\r\n            pivotIndex++;\r\n            console.log(\"start :\" +start+\" end : \" +end+\" pivot : \"+pivotIndex+\" k : \"+k +\" k+pivotIndex = \"+(k+pivotIndex));\r\n\r\n            \r\n            compair = [];\r\n            compair.push(true);\r\n            compair.push(k+pivotIndex);\r\n            animations.push(compair);\r\n            \r\n            \r\n            }\r\n            else{\r\n                console.log( \"in the loop pivot =false comparison  = true cvaal = false \");\r\n                console.log(\"arr[\"+i+\"] > \"+\"arr[\"+end+\"]  = \"+arr[i] +\" > \"+arr[end]+\" ie \"+pivotValue);\r\n                console.log(\"in animation push index \"+(k+i)+\" and \"+(k+end));\r\n                \r\n            compair = [];\r\n             \r\n            compair.push(false);\r\n            compair.push(true);\r\n            compair.push(false);\r\n            compair.push(k+i);\r\n            compair.push(k+end);\r\n\r\n            animations.push(compair);\r\n            \r\n            }\r\n        }\r\n        //pi and e =>y +r h +g o\r\n        // Putting the pivot value in the middle\r\n        //swap aniimation\r\n        \r\n            compair = [];\r\n\r\n            compair.push(false);\r\n            compair.push(false);\r\n            compair.push(k+pivotIndex);\r\n            compair.push(k+end);\r\n            compair.push(arr[k+pivotIndex]);\r\n            compair.push(arr[k+end]);\r\n\r\n            animations.push(compair);\r\n            \r\n           console.log(\"out of loop is pivot =false iscomparison =false is swapping  \");\r\n           console.log(\"swap values at index \"+pivotIndex+\" and \"+end+\" with value \"+arr[pivotIndex]+\" and \"+arr[end]+\"global index val at index ; \"+(k+pivotIndex)+\" and\"+(k+end) );\r\n           \r\n        [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]] \r\n        // p\r\n\r\n        return pivotIndex;\r\n    };\r\n\r\n\r\n    function xquickSort(arr, start, end,k) {\r\n        ///k is no of element before start for referenceing in animations array\r\n        // Base case or terminating case\r\n        if (start >= end) {\r\n            return;\r\n        }\r\n        \r\n        // Returns pivotIndex\r\n        let index = partition(arr, start, end,k);\r\n        console.log(\" In the quicksort start :\" +start+\" end : \" +end+\" pivot : \"+index+\" k : \"+k +\" k+pivotIndex = \"+(k+index));\r\n\r\n        var compair = [];\r\n        compair.push(true);\r\n        compair.push(k+index);\r\n        animations.push(compair);\r\n        \r\n        // Recursively apply the same logic to the left and right subarrays\r\n        quickSort(arr, start, index - 1,k);\r\n        quickSort(arr, index + 1, end,k+index+1);\r\n\r\n        return arr;\r\n    };\r\n*/\r\n    var temp =quickSort(arr,0,arr.length-1);\r\n\r\n    //console.log(\"quicksort input \" + array);\r\n\r\n    //console.log(\"quick sorted array : \" +temp);\r\n  /* if(testSort(temp,array)){\r\n        console.log(\"tested succesfull \");\r\n    }\r\n    else{\r\n        console.log(\"tested unsuccesfull error in sort \");\r\n    }\r\n    */\r\n    \r\n    return animations;\r\n    \r\n}","import { ANIMATION_SPEED,DELAY,MAX_H,MIN_H,COLOR_BAR,COLOR_CHECK,COLOR_IN,COLOR_OUT,COLOR_BLUE,COLOR_SORTED,NO_OF_BARS,} from './SortingVisualizer';\r\nimport {colorChangeRequest,heightChangeRequest,singlecolorChangeRequest,twocolorChangeRequest} from './Utility';\r\n\r\nexport function deployAnimations(animations,setIsSorting,setIsSorted){\r\n\r\n    var time = 0;\r\n    \r\n     \r\n\r\n    \r\n\r\n    for(let i=0;i<animations.length;i++)   {\r\n\r\n        if(animations[i][2]){\r\n            \r\n            const index1 = animations[i][0];\r\n            const index2 = animations[i][1];\r\n            const height1 = animations[i][3];\r\n            const height2 = animations[i][4];\r\n            \r\n            colorChangeRequest(index1,index2,COLOR_CHECK,time);//yellow\r\n            time++;\r\n            colorChangeRequest(index1,index2,COLOR_OUT,time);//red\r\n            time++;\r\n            heightChangeRequest(index1,height2,time);\r\n            time++;\r\n            heightChangeRequest(index2,height1,time);\r\n            time++;\r\n            colorChangeRequest(index1,index2,COLOR_IN,time);//green\r\n            time++;\r\n             colorChangeRequest(index1,index2,COLOR_BAR,time);//torqoise\r\n            time++;\r\n        }else{\r\n            const index1 = animations[i][0];\r\n            const index2 = animations[i][1];           \r\n            \r\n            colorChangeRequest(index1,index2,COLOR_CHECK,time);//yellow\r\n            time++;\r\n            colorChangeRequest(index1,index2,COLOR_IN,time);//green\r\n            time++;\r\n            colorChangeRequest(index1,index2,COLOR_BAR,time);//torqoise\r\n            time++;\r\n        }\r\n    }\r\n\r\n    //console.log(\"animation loop end setTimeout stack prepared ;\");\r\n    sortCompletedAnimation(time,setIsSorting,setIsSorted);\r\n\r\n    \r\n}\r\n\r\n//merge sort animation reader and  deployer \r\nexport function deployMergeAnimations(animations,setIsSorting,setIsSorted){\r\n\r\n\r\n    var time = 0;\r\n     for(let i=0;i<animations.length;i++)   {\r\n         if(!animations[i][0]){\r\n             //compair index1 and 2\r\n             const index1 = animations[i][1];\r\n             const index2 = animations[i][2];\r\n\r\n             if(animations[i][3]){\r\n                 // change height with right < left \r\n                colorChangeRequest(index1,index2,COLOR_CHECK,time);\r\n                time++;\r\n                colorChangeRequest(index1,index2,COLOR_OUT,time);\r\n                time++;\r\n                \r\n                heightChangeRequest(animations[i][4],animations[i][5],time);\r\n                time++;\r\n                twocolorChangeRequest(index1,index2,COLOR_IN,COLOR_BLUE,time);\r\n                time++;\r\n                colorChangeRequest(index1,index2,COLOR_BAR,time);//torqoise\r\n                time++;\r\n\r\n\r\n\r\n             }else{\r\n             // change height with right > left \r\n\r\n             colorChangeRequest(index1,index2,COLOR_CHECK,time);\r\n             time++;\r\n             colorChangeRequest(index1,index2,COLOR_IN,time);\r\n             time++;\r\n             \r\n             heightChangeRequest(animations[i][4],animations[i][5],time);\r\n             time++;\r\n             \r\n             colorChangeRequest(index1,index2,COLOR_BAR,time);//torqoise\r\n             time++;\r\n\r\n             }\r\n\r\n\r\n         }else{\r\n            const index1 = animations[i][1];\r\n\r\n             \r\n             singlecolorChangeRequest(index1,COLOR_BLUE,time);\r\n             time++;\r\n             heightChangeRequest(index1,animations[i][2],time);\r\n             time++;\r\n             singlecolorChangeRequest(index1,COLOR_IN,time);\r\n             time++;\r\n             singlecolorChangeRequest(index1,COLOR_BAR,time);\r\n             time++;\r\n         }\r\n     }\r\n\r\n//console.log(\"merge sort animation stack started \");\r\nsortCompletedAnimation(time,setIsSorting,setIsSorted);\r\n\r\n}\r\n//quick sort aniamtions reader and deployer\r\nexport function deployQuickAnimations(animations,setIsSorting,setIsSorted){\r\n\r\n    var time =0;\r\n\r\n    for(let i=0;i<animations.length;i++){\r\n\r\n        if(animations[i][0]){\r\n            //is pivot\r\n            const index1 = animations[i][1];\r\n            singlecolorChangeRequest(index1,COLOR_BLUE,time);\r\n            time++;\r\n            singlecolorChangeRequest(index1,COLOR_BAR,time);\r\n            time++;\r\n        }\r\n        else{\r\n            //not a pivot but comparison or swap\r\n            if(animations[i][1]){\r\n                //comparison is accuring \r\n                const index1 = animations[i][3];\r\n                const index2 = animations[i][4];\r\n\r\n                if(animations[i][2]){\r\n                    // green make smaller element  on left side by swapping in  next animation\r\n                    colorChangeRequest(index1,index2,COLOR_CHECK,time);\r\n                    time++;\r\n                    colorChangeRequest(index1,index2,COLOR_IN,time);\r\n                    time++;\r\n                    colorChangeRequest(index1,index2,COLOR_BAR,time);\r\n                    time++;\r\n\r\n\r\n                }else{\r\n                    //red already on the right side of pivot\r\n                    colorChangeRequest(index1,index2,COLOR_CHECK,time);\r\n                    time++;\r\n                    colorChangeRequest(index1,index2,COLOR_OUT,time);\r\n                    time++;\r\n                    colorChangeRequest(index1,index2,COLOR_BAR,time);\r\n                    time++;\r\n                }\r\n\r\n            }else{\r\n                //not  a pivot and compairison then its swap aniamation\r\n                const index1 = animations[i][2];\r\n                const index2 = animations[i][3];\r\n                const val1 = animations[i][4];\r\n                const val2 = animations[i][5];\r\n\r\n                colorChangeRequest(index1,index2,COLOR_BLUE,time);\r\n                time++;\r\n                heightChangeRequest(index1,val2,time);\r\n                time++;\r\n                heightChangeRequest(index2,val1,time);\r\n                time++;\r\n                colorChangeRequest(index1,index2,COLOR_BAR,time);\r\n                time++;\r\n\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //console.log(\"animation for quick sort loaded\");\r\n\r\n    sortCompletedAnimation(time,setIsSorting,setIsSorted);\r\n\r\n}\r\n\r\nexport function sortCompletedAnimation(time,setIsSorting,setIsSorted){\r\n    for(let i=0;i<NO_OF_BARS;i++){\r\n        singlecolorChangeRequest(i,COLOR_SORTED,time);\r\n        time++;\r\n\r\n    }\r\n    setTimeout(()=>{\r\n        setIsSorting(false);\r\n        setIsSorted(true);\r\n    },time);\r\n    //console.log(\"sorting ended at time t = \"+(time*DELAY)+\"sec\" );\r\n}\r\n\r\n","import React from 'react';\r\nimport '../SortViz.css';\r\nimport {getRandomArray } from './Utility';\r\nimport {bubbleSortAnimations } from './algorithms/bubbleSort';\r\nimport {mergeSortAnimations} from './algorithms/mergeSort';\r\nimport {insertionSortAnimations} from './algorithms/insertionSort';\r\nimport {quickSortAnimations} from './algorithms/quickSort';\r\nimport {deployAnimations,deployMergeAnimations,deployQuickAnimations} from './AnimateComponent';\r\nimport {COLOR_BAR} from './SortingVisualizer';\r\n\r\n\r\nconst Navbar = ({array, setArray,setSortType,arraySize,setArraySize,isSorting,setIsSorting,isSorted,setIsSorted}) =>{\r\n    const resetArray = (e) => {\r\n        if(isSorting){\r\n            //console.log(\"connot reset soting is under progress\");\r\n            return;\r\n        }\r\n        setIsSorted(false);\r\n\r\n        setArray( getRandomArray(arraySize));\r\n        const aux = document.getElementsByClassName(\"array-bar\");\r\n        for(let i=0;i<arraySize;i++){\r\n            aux[i].style.backgroundColor = COLOR_BAR;\r\n        }\r\n        //console.log(\"reset array using button \");\r\n    }\r\n\r\n    const bubbleSort =  (e) =>{\r\n        e.preventDefault();\r\n        if(isSorting){\r\n           // console.log(\"connot reset soting is under progress\");\r\n            return;\r\n        }\r\n        if(isSorted){\r\n             resetArray();\r\n         }\r\n        setIsSorting(true);\r\n        //console.log(\"bubble Sort \");\r\n        setSortType('bubble');\r\n        const animations = bubbleSortAnimations(array);\r\n       // console.log(animations);\r\n        deployAnimations(animations,setIsSorting,setIsSorted);\r\n       \r\n    }\r\n\r\n\r\n    const mergeSort =  (e) =>{\r\n        e.preventDefault();\r\n        if(isSorting){\r\n            //console.log(\"connot reset soting is under progress\");\r\n            return;\r\n        }\r\n        if(isSorted){\r\n            resetArray();\r\n        }\r\n        setIsSorting(true);\r\n\r\n        //console.log(\"merge Sort \");\r\n        setSortType('merge');\r\n        const animations  = mergeSortAnimations(array);\r\n        //console.log(animations );\r\n        deployMergeAnimations(animations,setIsSorting,setIsSorted);\r\n\r\n    }\r\n\r\n    const insertionSort =  (e) =>{\r\n        e.preventDefault();\r\n        if(isSorting){\r\n            //console.log(\"connot reset soting is under progress\");\r\n            return;\r\n        }\r\n        if(isSorted){\r\n            resetArray();\r\n        }\r\n        setIsSorting(true);\r\n\r\n        //console.log(\"insertion Sort \");\r\n        setSortType('insertion');\r\n        const animations = insertionSortAnimations(array);\r\n        deployAnimations(animations,setIsSorting,setIsSorted);\r\n    }\r\n\r\n    const quickSort =  (e) =>{\r\n        e.preventDefault();\r\n        if(isSorting){\r\n            //console.log(\"connot reset soting is under progress\");\r\n            return;\r\n        }    \r\n        if(isSorted){\r\n            resetArray();\r\n        }    \r\n        setIsSorting(true);\r\n\r\n        //console.log(\"quick Sort \");\r\n        setSortType('quick');\r\n        const animations =quickSortAnimations(array);\r\n        deployQuickAnimations(animations,setIsSorting,setIsSorted);\r\n        //console.log(animations);\r\n    }\r\n    \r\n\r\n    return(\r\n        <div className = \"navbar row  row-content\">\r\n                \r\n                <button onClick = {resetArray} className = \"btn\" type = \"submit\" >Reset Array</button>\r\n                <button onClick = {bubbleSort} className = \"btn\" type = \"submit\" >Bubble Sort </button>\r\n                <button onClick = {mergeSort} className = \"btn\" type = \"submit\" >Merge Sort </button>\r\n                <button onClick = {insertionSort} className = \"btn\" type = \"submit\" >Insertion Sort </button>\r\n                <button onClick = {quickSort} className = \"btn\" type = \"submit\" >Quick Sort </button>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import {testSort} from '../Utility';\r\n\r\nexport function  bubbleSortAnimations (array){\r\n\r\n    var arr =[...array] ;\r\n    \r\n    const animations = [];\r\n    for(let i = 0; i <arr.length;i++){\r\n       \r\n\r\n        for(let j =1;j<arr.length - i ;j++){\r\n\r\n            \r\n            var compair = [];\r\n            compair.push(j-1);\r\n            compair.push(j);\r\n\r\n            if(arr[j-1]>arr[j]){\r\n                compair.push(true);\r\n                compair.push(arr[j-1]);\r\n                compair.push(arr[j]);\r\n                \r\n                animations.push(compair);\r\n                \r\n\r\n                var t=arr[j-1];\r\n                arr[j-1] = arr[j];\r\n                arr[j] = t;\r\n\r\n                \r\n\r\n            }\r\n            else{\r\n                compair.push(false);\r\n                animations.push(compair);\r\n\r\n                \r\n\r\n            }\r\n\r\n            \r\n\r\n        }\r\n    }\r\n    //console.log(\"bubblesort input \" + array);\r\n\r\n    //console.log(\"bubblesortd array : \" +arr);\r\n  /*  if(testSort(arr,array)){\r\n        console.log(\"tested succesfull \");\r\n    }\r\n    else{\r\n        console.log(\"tested unsuccesfull error in sort \");\r\n    }\r\n    */\r\n   //console.log(animations);\r\n    return animations;\r\n    \r\n\r\n}\r\n\r\n","import {testSort } from '../Utility';\r\n\r\nexport function insertionSortAnimations (array){\r\n\r\n    var animations = [];\r\n\r\n    var arr =[...array] ;\r\n\r\n    for(let i=1;i<arr.length;i++){\r\n        \r\n        let cur = arr[i];\r\n        let j=i-1;\r\n        // i y\r\n        \r\n            while(j>-1 && cur < arr[j] ){\r\n                // j+1, j check y r g o  \r\n                var compair = [];\r\n\r\n                compair.push(j);\r\n                compair.push(j+1);\r\n                compair.push(true);\r\n                compair.push(arr[j]);\r\n                compair.push(arr[j+1]);\r\n\r\n                animations.push(compair);\r\n                \r\n                arr[j+1]=arr[j];\r\n                //additional step for better anim\r\n                arr[j] =cur;\r\n                //decrementing for while loop\r\n                j--;\r\n            }   \r\n        \r\n        //j+1 y g o\r\n        // j!== -1 condition for j==0 condition satisfied in the while loop\r\n        if(j!==-1){\r\n            var compair = [];\r\n\r\n            compair.push(j);\r\n            compair.push(j+1);\r\n            compair.push(false);\r\n\r\n            animations.push(compair);\r\n\r\n            arr[j+1]=cur;\r\n        }\r\n    }\r\n\r\n    //console.log(\"insertionsort input \" + array);\r\n\r\n    //console.log(\"insertion sorted array : \" +arr);\r\n  /* if(testSort(arr,array)){\r\n        console.log(\"tested succesfull \");\r\n    }\r\n    else{\r\n        console.log(\"tested unsuccesfull error in sort \");\r\n    }\r\n    */\r\n    console.log(animations);\r\n    return animations;\r\n\r\n}","import React ,{useState , useEffect}from 'react';\r\nimport {COLOR_BAR } from './SortingVisualizer';\r\nimport '../SortViz.css'; \r\n\r\n\r\n function Bars ({ array,  sortType, arraySize,isSorting,isSorted})  {\r\n\r\n\r\n    \r\n\r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n    return(\r\n        <div className = \"row \">\r\n            <div className = \"col info-display\">\r\n                State information<hr/>\r\n                array size : {arraySize}\r\n                <br/>\r\n                array : {JSON.stringify(array)}\r\n                <br/>\r\n                sort type : {sortType}\r\n                <br />\r\n                is Sorting : {isSorting ? \"Yes \": \"No\"}\r\n                <br/>\r\n                is Sorted : {isSorted ? \"Yes\" :\"No\"}\r\n                \r\n\r\n            </div>\r\n            <div className = \"col array-container\">\r\n                {\r\n                    array.map((bar,index)=>{\r\n                        return(\r\n                            <div className = \"array-bar\" \r\n                                key = {index}\r\n                                style={{height : `${bar}px`,\r\n                                    backgroundColor : COLOR_BAR\r\n                                    }}>\r\n                                    .\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Bars ;","import React , { useState,useEffect} from 'react';\r\n\r\nimport Navbar from './Navbar';\r\nimport Bars  from './ArrayComponent';\r\nimport '../SortViz.css';\r\nimport {getRandomArray } from './Utility';\r\n\r\nexport const ANIMATION_SPEED = 1;//speed 1 10 100 1000\r\nexport const NO_OF_BARS = 100;\r\nexport const MIN_H = 20;\r\nexport const MAX_H = 420;\r\nexport const COLOR_CHECK = \"yellow\";\r\nexport const COLOR_OUT = \"red\";\r\nexport const COLOR_IN = \"green\";\r\nexport const COLOR_BAR = \"turquoise\";\r\nexport const COLOR_BLUE = \"blue\";\r\nexport const COLOR_SORTED = \"blueviolet\";\r\n\r\nexport const DELAY = 5;//5 milisec\r\n\r\n\r\n function SortingVisualizer (props) {\r\n\r\n    const [array,setArray]=useState([]);\r\n    const [sortType,setSortType] = useState('');\r\n    const [arraySize, setArraySize] = useState(NO_OF_BARS);\r\n    const [isSorting,setIsSorting] = useState(false);\r\n    const [isSorted,setIsSorted] = useState(false);\r\n\r\n \r\n    useEffect(()=>{\r\n        setArray(getRandomArray(arraySize));\r\n    },[])\r\n\r\n    \r\n\r\n    return(\r\n        <div className = \"container\">\r\n            <Navbar \r\n            array = {array}\r\n            setArray = {setArray}\r\n            setSortType = {setSortType}\r\n            arraySize = {arraySize}\r\n            setArraySize = {setArraySize}\r\n            isSorting = {isSorting}\r\n            setIsSorting = {setIsSorting}\r\n            isSorted = {isSorted}\r\n            setIsSorted = {setIsSorted}\r\n            />\r\n\r\n            <Bars  \r\n            array = {array}\r\n            \r\n            sortType = {sortType}\r\n            arraySize = {arraySize}\r\n            isSorting = {isSorting}\r\n            isSorted = {isSorted}\r\n            \r\n            />\r\n            <footer className =\"footer\" >\r\n                <div >Created by Aashutosh Shrivastav @2020<br/>\r\n                    To know more <a className =\"alink\" target = \"_blank\" href = \"https://aashutosh-shrivastav.github.io/mysite/\">click here</a> \r\n                </div> \r\n            </footer>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SortingVisualizer;","import './App.css';\nimport React from 'react';\nimport SortingVisualizer    from './components/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         Sorting Visualizer\n      </header>\n      <SortingVisualizer  />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}